#ch12_BSF

# s是起點
# 初始化
for each u ∈ V - {s}
    u.color = WHITE, u.d = ∞, u.π = NIL  # 將每個節點的顏色設為白色，距離設為無限，前驅設為空
s.color = GRAY, s.d = 0, s.π = NIL  # 將起點s的顏色設為灰色，距離設為0，前驅設為空
Q = ∅ and ENQUEUE(Q,s)  # 初始化空隊列並將起點s加入隊列

# 當隊列不為空時，執行以下操作
while Q ≠ ∅
    u = DEQUEUE(Q)  # 從隊列中取出一個節點u
    for each v ∈ Adj[u]  # 對於每個與u相鄰的節點v
        if v.color == WHITE  # 如果節點v的顏色是白色
            v.color = GRAY, v.d = u.d + 1, v.π = u  # 將v的顏色設為灰色，距離設為u的距離加1，前驅設為u
            ENQUEUE(Q,v)  # 將v加入隊列

    u.color = BLACK  # 將u的顏色設為黑色，表示u已經被完全探索

#簡介：把u拿出來，所有u的下一個都是v，那v的距離就是u+1，v的前一個是u，此時u的周遭都灰色了，所以u變黑色
#時間複雜度：O(|V| +|E|)

===

#ch12_DSF

#初始化
DFS(G = (V, E))
for each v ∈ V  # 對圖中的每個節點v
    v.color = WHITE  # 初始化節點的顏色為白色，表示尚未訪問
    v.π = NIL  # 初始化節點的前驅為空
time = 0  # 初始化時間計數器

#迴圈
for each v ∈ V  # 再次遍歷圖中的每個節點v
    if v.color == WHITE  # 如果節點v尚未被訪問
        DFS-Visit(G, v, time)  # 對節點v進行深度優先訪問

#迴圈的程式
DFS-Visit(G = (V, E), u, time)
time = time + 1  # 遞增時間計數器

u.d = time  # 記錄節點u的發現時間 #起點
u.color = GRAY  # 將節點u標記為灰色，表示正在訪問
for each v ∈ Adj[u]  # 對於每個與u相鄰的節點v
    if v.color == WHITE  # 如果節點v尚未被訪問
        v.π = u  # 設置v的前驅為u
        DFS-Visit(G, v, time)  # 對節點v進行深度優先訪問
time = time + 1  # 遞增時間計數器

u.f = time  # 記錄節點u的完成時間 #終點
u.color = BLACK  # 將節點u標記為黑色，表示訪問完成

#迴圈內再一個跟自己一樣的迴圈，藉此達到走路紀錄time-mark的效果

#簡介：從起點u開始走，紀錄每個點在第幾步走到，直到cycle再走回頭路回起點u
#時間複雜度：O(|V| +|E|)

#ch13_Disjoint Set

# 創建單元素集合
Make-Set(x)
x.p = x  # 初始化節點x的父節點為其自身
x.rank = 0  # 初始化節點x的秩為0

# 合併兩個集合，根據rank，rank是指深度
Link(x, y)
if x.rank > y.rank  # 如果x的秩大於y的秩
    y.p = x  # 將y的父節點設置為x
else  # 否則
    x.p = y  # 將x的父節點設置為y
    if x.rank == y.rank  # 如果x的秩等於y的秩
        y.rank = x.rank + 1  # 則增加y的秩

# 查找集合的根節點（帶路徑壓縮）
Find-Set(x)
if x ≠ x.p  # 如果x不是根節點
    x.p = Find-Set(x.p)  # 路徑壓縮：將x的父節點設置為根節點
return x.p  # 返回根節點

# 合併兩個集合
Union(x, y)
Link(Find-Set(x), Find-Set(y))  # 先找到x和y的根節點，再合併這兩個集合

#簡介：把同一個set的字串連在一起
#時間複雜度：O(m乘以a(n))

#ch14_Prim

# r是起點

MST-Prim(G = (V, E, w), r)
1. for each u ∈ V  # 對於圖中的每個節點u
2.     u.key = ∞  # 初始化u的鍵值為無限大
3.     u.π = NIL  # 初始化u的前驅為空
4. r.key = 0  # 將起點r的鍵值設置為0
5. Q = ∅  # 初始化優先隊列Q
6. for each u ∈ V  # 將所有節點加入優先隊列Q
7.     Insert(Q, u)  # 將u插入優先隊列Q

8. while Q ≠ ∅  # 當優先隊列Q不為空時
9.     u = Extract-Min(Q)  # 從Q中取出鍵值最小的節點u
10.    for each v ∈ adj[u]  # 對於每個與u相鄰的節點v
11.        if v ∈ Q and w(u, v) < v.key  # 如果v在Q中且邊(u, v)的權重小於v的鍵值
12.            v.π = u  # 更新v的前驅為u
13.            v.key = w(u, v)  # 更新v的鍵值為邊(u, v)的權重
14.            Decrease-Key(Q, v, w(u, v))  # 調整Q中v的位置，以反映其鍵值的變化
15. return A = {(v.π, v) | v ∈ V \ {r}}  # 返回最小生成樹的邊集合A

# 假設有輔助函數Insert, Extract-Min, Decrease-Key來操作優先隊列Q

#簡介：由起點r出發，每次都選權重最少的邊走，不能連成cycle
#時間複雜度：O(|V|log|V| +|E|)

===

#ch14_Kruskal

MST-Kruskal(G = (V, E, w))
1. A = ∅  # 初始化最小生成樹的邊集合A為空
2. for each v ∈ V  # 對於圖中的每個節點v
3.     Make-Set(v)  # 將每個節點v獨立地設置為一個集合
4. edges = list(E)  # 創建一個用來存儲邊的列表edges，包含圖中的所有邊

5. Sort(edges, key=lambda (u, v): w(u, v))  # 將邊按權重從小到大排序
6. for each edge (u, v) in edges  # 遍歷排序後的邊列表
7.     if Find-Set(u) ≠ Find-Set(v)  # 如果u和v不屬於同一個集合 #所以不會有cycle
8.         A = A ∪ {(u, v)}  # 將邊(u, v)加入最小生成樹的邊集合A
9.         Union(u, v)  # 合併u和v所在的集合
10. return A  # 返回最小生成樹的邊集合A

# 假設有輔助函數Make-Set, Find-Set, Union來操作不相交集合

#簡介：沒有起點，從最少的權重開始選，不能連成cycle
#時間複雜度：O(|E|log|V|)

#ch15_two operation

# 初始化操作
Initialization(G, s)
1. for each v ∈ V  # 對於圖中的每個節點v
2.     v.d = ∞  # 初始化v的距離為無限大
3.     v.π = NIL  # 初始化v的前驅節點為空
4. s.d = 0  # 將起點s的距離設置為0

# relax = 更新，不斷更新最短距離操作
Relax(u, v, w)
1. if v.d > u.d + w(u, v)  # 如果從u經由邊(u, v)到v的距離小於v當前的距離
2.     v.d = u.d + w(u, v)  # 更新v的距離為從u到v的距離
3.     v.π = u  # 更新v的前驅節點為u

===

#ch15_Bellman-Ford

Bellman-Ford(G = (V, E, w), s)
1. Initialization(G, s)  # 初始化圖G中的節點，將起點s的距離設置為0，其他節點的距離設置為無限大

2. for i = 1 to |V| - 1  # 重複|V|-1次
3.     for each edge (u, v) ∈ E  # 對於圖G中的每條邊(u, v)
4.         Relax(u, v, w)  # 執行鬆弛操作，更新v的距離和前驅節點

5. for each edge (u, v) ∈ E  # 再次遍歷所有邊，檢查是否存在負權重環
6.     if v.d > u.d + w(u, v)  # 如果可以找到一條更短的路徑，則存在負權重環
7.         return False  # 返回False，表示圖中存在負權重環

8. return True  # 返回True，表示沒有找到負權重環，所有最短路徑已計算完成

# 假設 Initialization 和 Relax 函數已經定義

#比較：ch14最小生成樹不是起點到某點的最短距離，ch15的Single-Source是起點到所有點的最短距離
#簡介：由起點s出發，不斷relax更新最短距離，可以處理負數邊
#時間複雜度：O(|V||E|)

===

#ch15_有向無環圖(Directed Acyclic Graph, DAG)的最短路徑算法

DAG-Shortest-Path(G, s)
1. Topologically sort the vertices of G.V  # 對圖G中的節點進行拓撲排序
2. Initialization(G, s)  # 初始化操作，設置起點s的距離為0，其他節點的距離為無限大

3. for each vertex u taken from the topological sorted order  # 根據拓撲排序順序遍歷每個節點u
4.     for each vertex v in Adj[u]  # 對於節點u的每個鄰接節點v
5.         Relax(u, v, w)  # 執行鬆弛操作，更新節點v的距離和前驅節點，如果從u到v的距離更短

# 假設 Initialization 和 Relax 函數已經定義

#簡介：沒有cycle，線有方向，不斷更新topologically sort的最短距離
#時間複雜度：O(|V|+|E|)

===

#ch15_Dijkstra

Dijkstra(G = (V, E, w), s)
1. Initialization(G, s)  # 初始化操作，設置起點s的距離為0，其他節點的距離為無限大

2. S = ∅  # S集合，存放已確定最短路徑的節點
3. Q = V  # Q優先隊列，存放未確定最短路徑的節點

4. Insert(Q, s)  # 將起點s插入優先隊列Q

5. while Q ≠ ∅  # 當優先隊列Q不為空時
6.     u = Extract-Min(Q)  # 從Q中取出鍵值最小的節點u
7.     S = S ∪ {u}  # 將節點u加入已確定最短路徑的集合S

8.     for each v in adj[u]  # 對於節點u的每個鄰接節點v
9.         Relax(u, v, w)  # 執行鬆弛操作，更新節點v的距離和前驅節點，如果從u到v的距離更短

# 假設 Initialization, Insert, Extract-Min, 和 Relax 函數已經定義

#簡介：1.可以是有向圖或無向圖 2.不能有負數權重邊 3.速度是最快的
#時間複雜度：O(|V|log|V| +|E|)